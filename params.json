{"name":"Kow","tagline":"Opinionated KnockOut(JS) Widget(s)","body":"KnockOut(JS) Widget\r\n===================\r\n\r\nAn opinionated widget constructor for Browserify and CoffeeScript, using [KnockOutJS](http://knockoutjs.com/) and [teacup](http://goodeggs.github.io/teacup/)+[databind](https://github.com/shimaore/teacup-databind).\r\n\r\nUsage\r\n=====\r\n\r\nIn the main application:\r\n\r\n```coffeescript\r\nko = require 'knockout'\r\n{MyWidget,my_widget} = (require 'kow-my-widget') ko\r\n\r\n# Later...\r\nteacup = require 'teacup'\r\n$('content').html = teacup.render ->\r\n  my_widget 'foo'\r\n# Provide default values for the fields.\r\nvalues = new MyWidget 'bar'\r\nko.applyBindings foo: values\r\n\r\n# Later...\r\nfield_value = values.observable_field()\r\n```\r\n\r\nIn `kow-my-widget`:\r\n\r\n```coffeescript\r\nmodule.exports = (require 'kow') 'my-widget', ->\r\n\r\n  ## The parameter of @data becomes MyWidget.\r\n  ## @constructor and @model are synonims for @data\r\n  ## You might also provide a CoffeeScript class instead of a function.\r\n  @data (value) ->\r\n    @observable_field = @ko.observable value\r\n\r\n  @view ({$root,data}) ->\r\n  ## the fields of the constructor are already injected in the data object\r\n  ## the data object is available as {data}, {value} and {doc}\r\n\r\n  @html ({div,input}) ->   # teacup+databind as parameter\r\n    div '.layout', ->\r\n      input '.name', -> bind: value: 'observable_field'\r\n```","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}